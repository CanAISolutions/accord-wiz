{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Create Vitest skeleton for validation hooks and terms step",
        "description": "Set up unit and RTL tests for `useStepValidity` and `RentalTermsStep` focusing on province-aware validation and gating.",
        "details": "- Add tests: `tests/unit/useStepValidity.test.ts`, expand RTL suite.\n- Ensure selectors match checklist labels.\n- Export JUnit to `test-results/vitest/results.xml`.",
        "testStrategy": "Vitest with jsdom; @testing-library/react for RTL; verify error messages and Next disabled until valid.",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Vitest skeleton for useStepValidity",
            "description": "Add or verify unit test scaffolding for validation logic; ensure edge cases for ON late fee/security deposit and required clause texts.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 1
          }
        ]
      },
      {
        "id": 2,
        "title": "Stabilize Playwright and RTL Selectors for Test Reliability",
        "description": "Improve test stability by standardizing selectors and wait strategies across Playwright and React Testing Library (RTL) tests, focusing on the ON flow and gating tests.",
        "details": "1. Audit existing selectors in Playwright and RTL tests:\n   - Identify inconsistent selector patterns\n   - Document flaky tests and failure patterns\n   - Create inventory of current data-testid usage\n\n2. Standardize component accessibility and test attributes:\n   - Add consistent aria-labels to all interactive elements\n   - Implement data-testid attributes following pattern: `{component-name}-{element-type}-{context}`\n   - Update component library to enforce accessibility standards\n\n3. Refactor test selectors:\n   - Replace brittle text/CSS selectors with data-testid selectors\n   - Implement role-based selectors as fallback (following accessibility best practices)\n   - Create helper functions for common selection patterns\n\n4. Improve wait strategies:\n   - Replace fixed timeouts with waitForSelector and waitForResponse\n   - Implement custom expect matchers for common wait scenarios\n   - Add retry logic for intermittent failures\n\n5. Update CI configuration:\n   - Configure proper timeout settings\n   - Implement test retries for flaky tests\n   - Add detailed logging for test failures\n\n6. Documentation:\n   - Create selector strategy documentation\n   - Update component guidelines to include test attribute requirements\n   - Document common test patterns and best practices",
        "testStrategy": "1. Local verification:\n   - Run full test suite locally 3+ times to verify consistency\n   - Use Playwright's trace viewer to analyze test execution\n   - Verify tests pass in headless and headed modes\n\n2. CI verification:\n   - Monitor test runs in CI environment for at least 5 consecutive builds\n   - Compare test execution times before and after changes\n   - Verify no new flaky tests are introduced\n\n3. Cross-browser testing:\n   - Verify tests pass consistently across Chrome, Firefox, and Safari\n   - Document any browser-specific workarounds\n\n4. Code review:\n   - Peer review of selector changes\n   - Verify accessibility improvements with automated tools (axe, lighthouse)\n   - Ensure all components follow updated guidelines\n\n5. Documentation validation:\n   - Review documentation with team members\n   - Verify new developers can follow selector patterns\n   - Conduct pair programming session to validate approach",
        "status": "pending",
        "dependencies": [
          1
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Create Vitest Skeleton for Serverless Endpoints",
        "description": "Set up Vitest testing infrastructure for serverless API endpoints (api/checkout.ts and api/download.ts) with smoke tests and ensure proper Node environment linting configuration for the api directory.",
        "details": "1. Create test files for serverless endpoints:\n   - `tests/api/checkout.test.ts`\n   - `tests/api/download.test.ts`\n\n2. Implement minimal smoke tests for each endpoint:\n   - Mock necessary dependencies and runtime context\n   - Test basic request/response flow\n   - For functions requiring unavailable runtime components, create documented test stubs with TODOs\n\n3. Set up testing utilities for API endpoints:\n   - Create helper functions for mocking serverless context\n   - Implement request/response mocking utilities\n   - Add fixtures for common test data\n\n4. Configure Node environment linting for api directory:\n   - Update ESLint configuration to include api/**\n   - Add appropriate Node.js environment settings\n   - Ensure serverless-specific rules are applied\n\n5. Update Vitest configuration:\n   - Configure environment for API tests (node vs jsdom)\n   - Set up appropriate mocking strategy for serverless context\n   - Ensure JUnit export includes API test results\n\n6. Document testing approach for serverless functions:\n   - Add README section on testing API endpoints\n   - Include examples of mocking strategies\n   - Document limitations and workarounds",
        "testStrategy": "1. Verify test structure:\n   - Confirm test files exist for both checkout.ts and download.ts endpoints\n   - Validate test file organization follows project conventions\n\n2. Run smoke tests:\n   - Execute `npm run test:api` or equivalent command\n   - Verify tests pass with appropriate mocking\n   - Check test coverage for basic endpoint functionality\n\n3. Validate linting configuration:\n   - Run `npm run lint` and verify api/** files are included\n   - Confirm ESLint applies Node.js environment rules to API files\n   - Test with a deliberate linting error in an API file to ensure detection\n\n4. Review test documentation:\n   - Ensure README updates clearly explain API testing approach\n   - Verify documented stubs include clear TODOs for future implementation\n\n5. CI integration:\n   - Confirm API tests run successfully in CI pipeline\n   - Verify JUnit results include API test outcomes\n   - Check that test coverage reports include API endpoints",
        "status": "pending",
        "dependencies": [
          1
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Vitest skeleton for Express server (/api/*, /health)",
            "description": "Add unit-level tests or documented stubs for Express routes with supertest or minimal mocks. Cover /health 200 and shape checks for /api/checkout handler (mock Stripe).",
            "details": "- Install dev deps if needed (supertest) or document manual plan\n- Add basic test to ensure server boots and responds on /health\n- Mock Stripe SDK for /api/checkout to assert body validation and 200 JSON {url} shape",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 3
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-08-08T20:51:49.186Z",
      "description": "Default tasks context",
      "updated": "2025-08-10T21:47:13.284Z"
    }
  }
}