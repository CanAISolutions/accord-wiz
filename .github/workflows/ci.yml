name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install deps
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Lint
        run: npm run lint
      - name: Unit tests (Vitest)
        run: npm run test:unit -- --reporter=junit --outputFile=test-results/vitest/results.xml
      - name: E2E tests (Playwright)
        run: npm run test:e2e
      - name: Build
        run: npm run build
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results/
            coverage/
      - name: Upload dist
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  deploy-staging:
    name: Deploy to Render (staging)
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main' && secrets.RENDER_DEPLOY_HOOK_STAGING != ''
    steps:
      - name: Trigger Render deploy (staging)
        env:
          RENDER_DEPLOY_HOOK_STAGING: ${{ secrets.RENDER_DEPLOY_HOOK_STAGING }}
        run: |
          curl -fsSL -X POST "$RENDER_DEPLOY_HOOK_STAGING"

  deploy-production:
    name: Deploy to Render (production)
    runs-on: ubuntu-latest
    needs: build-test
    if: startsWith(github.ref, 'refs/tags/v') && secrets.RENDER_DEPLOY_HOOK_PROD != ''
    steps:
      - name: Trigger Render deploy (production)
        env:
          RENDER_DEPLOY_HOOK_PROD: ${{ secrets.RENDER_DEPLOY_HOOK_PROD }}
        run: |
          curl -fsSL -X POST "$RENDER_DEPLOY_HOOK_PROD"

